from numpy import genfromtxt
import math
import textwrap 
import argparse
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import sys

def drop_columns(dataset_file_name, column_nubmer):
    df = pd.read_csv(dataset_file_name)

    df.drop([df.columns[0],
             df.columns[9]],
            axis = 1, inplace = True)
    
    df.to_csv(dataset_file_name_dropped, index = False)


def modify_labels(dataset_file_name):
    dataset = genfromtxt(dataset_file_name, delimiter=',')
    y = dataset[:, -1]
    dataset = dataset[:, :-1]
    print(y)
    z =[]
    for i in y:
        z.append(math.log10(i + 1e-7))

    new_data_set = np.column_stack((dataset, z))        
    np.savetxt(dataset_file_name, new_data_set, delimiter=",")
     
"""
Error files need to be formated as one column file
This column contain the mean error of each flight
"""
def plot_flight_error(error_file_name):
    num_lines = sum(1 for line in open(error_file_name))
    print (num_lines)
    
    y = np.loadtxt(error_file_name)
    x = np.arange(y.size)
    
    print(y)
    z = np.mean(y)
    
    print ("error standard deviation : ", np.std(y))    
    print(z)
        
    plt.plot(x, y, color='blue')
    
    plt.xlabel('Number of flight')
    plt.ylabel('Error of deformation combined totatly in m')

    figure = plt.gcf() # get current figure
    figure.set_size_inches(25, 6)    
    
    plt.savefig(error_file_name + ".svg", dpi=100, format="svg")
    

"""
Count files need to be formated as one column file
This column contain the number of steps of each flight
"""

def plot_flight_count(count_file_name):
    
    num_lines = sum(1 for line in open(count_file_name))
    print (num_lines)
    
    y = np.loadtxt(count_file_name)
    x = np.arange(y.size)    
    z = np.mean(y)
    
    print ("count deviation: ", np.std(y) )
    print(z)
    
    plt.plot(x, y, color='blue')
    
    plt.xlabel('Number of flights')
    plt.ylabel('Controller Counts before deformation')
    
    figure = plt.gcf() # get current figure
    figure.set_size_inches(25, 6)    

    plt.savefig(count_file_name + ".png", dpi=100)


def plot_histogram(count_file_name, histogram_file_name):
    x = np.loadtxt(count_file_name)
    plt.hist(x, bins=3)

    plt.xlabel('Number of time steps')
    plt.ylabel('Frequency')
    
    figure = plt.gcf() 
    figure.set_size_inches(25, 6)    

    plt.savefig(histogram_file_name + ".png", dpi=100)

    
def plot_histogram_2d(histogram_file_name):
    
    data = pd.read_csv(histogram_file_name, sep=' ',header=None, index_col =0)

    data.plot(kind='bar')
    plt.xlabel('Number of time steps')
    plt.ylabel('Frequency')
            
    figure = plt.gcf() # get current figure
    figure.set_size_inches(25, 6)    

    plt.savefig(histogram_file_name + ".png", dpi=100)

def cumulative_histogram(filename):
    data = genfromtxt(filename, delimiter=' ')
    x = data[:, 0:1]
    y = data[:, 1:2]
    frequency_sum = np.sum(y)
    z = []
    for i in range(1, len(y)+1):
        z.append(np.sum(y[0:i]) / frequency_sum)

    return x, z    
    
def plot_one_cumulative_histogram(histogram_file_name):
    x, z = cumulative_histogram(histogram_file_name)
    
    plt.plot(x, z, color='blue')
    plt.xlabel('Number of time steps')
    plt.ylabel('cdf')
    plt.grid()
    figure = plt.gcf() # get current figure
    figure.set_size_inches(25, 6)    
    plt.savefig(histogram_file_name + "one_cumulative_.png", dpi=100)
    
def plot_two_cumulative_histogram(histogram_file_name,
                                  histogram_file_name_2):
    x, y = cumulative_histogram(histogram_file_name)
    i, j = cumulative_histogram(histogram_file_name_2)
        
    plt.plot(x, y, color='blue', label="Trained controller")
    plt.plot(x, j, color='green', label="Random controller")

    plt.title("Cumulative histogram of two controllers")
    plt.xlabel('Number of time steps')
    plt.ylabel('cdf')
    plt.legend()
    plt.grid()
    figure = plt.gcf() # get current figure
    figure.set_size_inches(25, 6)    
    plt.savefig(histogram_file_name + "two_cumulative_.png", dpi=100)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog='Plotting script',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
        PLotting script!
        --------------------------------
        This script is used to plot the result generated by the
        quadcopters in the simulator
        It can be used to plot one of the files, 
        or all of them at the same time.
        You have to provide the file format as described in the above comments.
        '''))

    parser.add_argument('--dataset_file_name', metavar="dataset file name", type=str, help="Enter error file name that has the dataset to modify the labels")
    parser.add_argument('--error_file_name', metavar="error file name", type=str, help="Enter error file name that has the mean value of each flight")
    parser.add_argument('--count_file_name', metavar="count file name", type=str, help="Enter flight count file name  ")
    parser.add_argument('--histogram_file_name', metavar="histogram file name", type=str, help="Enter a histogram file name, two column file name, nuumber of steps and frequency")
    parser.add_argument('--cumulative_histogram_files_name', metavar=" histogram file name", type=str, nargs="+" ,help="Enter one or more histogram file name, each file is a two column file name, number of steps and frequency, the script will generate automatically the cumulative histogram")
    parser.add_argument('--drop_columns', metavar=" drop column", type=int ,help="Enter column number to delete from dataset")
    args = parser.parse_args()

    if len(sys.argv)==1:
        parser.print_help(sys.stderr)
        sys.exit(1)
 
    if args.error_file_name:
        plot_flight_error(args.error_file_name)

    elif args.count_file_name:    
        plot_flight_count(args.count_file_name)
        
    elif args.dataset_file_name:
        modify_labels(args.dataset_file_name)
        
    elif args.histogram_file_name:   
        plot_histogram_2d(args.histogram_file_name)        

    elif args.cumulative_histogram_files_name:
        if isinstance(args.cumulative_histogram_files_name, str):
            plot_one_cumulative_histogram(args.cumulative_histogram_files_name)
        elif isinstance(args.cumulative_histogram_files_name, list):
            plot_two_cumulative_histogram(args.cumulative_histogram_files_name[0],
                                          args.cumulative_histogram_files_name[1])
    
